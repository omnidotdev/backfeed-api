datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

// Pothos generator (https://pothos-graphql.dev/docs/plugins/prisma)
generator pothos {
    provider = "prisma-pothos-types"
    // clientOutput = "@prisma/client"
    // output = "./pothos-types.ts"
}

// Pothos codegen generator (https://github.com/Cauen/prisma-generator-pothos-codegen)
generator pothosCrud {
    provider            = "prisma-generator-pothos-codegen"
    generatorConfigPath = "./codegen.config.ts"
}

model User {
    id            String   @id @default(cuid())
    createdAt     DateTime @default(now())
    updatedAt     DateTime @updatedAt
    walletAddress String   @unique
    Upvote        Upvote[]
    Post          Post[]
}

model Organization {
    id        String    @id @default(cuid())
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    name      String    @unique
    slug      String    @unique
    projects  Project[]
}

model Project {
    id             String       @id @default(cuid())
    createdAt      DateTime     @default(now())
    updatedAt      DateTime     @updatedAt
    // ? unique?
    // name           String       @unique
    name           String
    // TODO remove, this would prevent (?) slug from being the same across orgs?
    // slug           String       @unique
    slug           String
    image          String?
    description    String?
    organization   Organization @relation(fields: [organizationId], references: [id])
    organizationId String
    posts          Post[]
}

model Post {
    id          String   @id @default(cuid())
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    // ? unique?
    title       String
    description String
    authorId    String
    author      User     @relation(fields: [authorId], references: [id])
    // TODO createdby, createdat, updatedat
    projectId   String
    project     Project  @relation(fields: [projectId], references: [id])
    // TODO upvotes (unique by wallet address)
    upvotes     Upvote[]
}

model Upvote {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    postId    String
    post      Post     @relation(fields: [postId], references: [id])
    userId    String
    user      User     @relation(fields: [userId], references: [id])
}
